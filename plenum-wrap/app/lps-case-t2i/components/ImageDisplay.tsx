/* eslint-disable @next/next/no-img-element */
import { PROVIDERS } from "@/app/lps-case-t2i/lib/provider-config";
import { ProviderKey, ProviderTiming } from "@/app/lps-case-t2i/lib/image-types";
import { Spinner } from "@/components/ui/spinner";
import { cn } from "@/lib/utils";

interface ImageDisplayProps {
  provider: ProviderKey;
  image: string | null;
  proxyImage?: string | null;
  timing?: ProviderTiming;
  failed: boolean;
  enabled: boolean;
  modelId: string;
}

export function ImageDisplay({
  provider,
  image,
  proxyImage,
  timing,
  failed,
  enabled,
  modelId,
}: ImageDisplayProps) {
  const providerConfig = PROVIDERS[provider];
  const isLoading = timing && !timing.completionTime;

  return (
    <div
      className={cn(
        "relative flex flex-col items-center justify-center rounded-xl border p-4",
        failed && "border-destructive",
        // !enabled && "opacity-50 grayscale",
      )}
    >
      <div className="flex h-10 items-center justify-between w-full mb-2">
        <div className="flex items-center space-x-2">
          {providerConfig.iconPath && (
            <img
              src={providerConfig.iconPath}
              alt={`${providerConfig.displayName} icon`}
              className="h-6 w-6"
            />
          )}
          <span className="text-lg font-semibold">
            {providerConfig.displayName}
          </span>
        </div>
        {isLoading && <Spinner className="h-5 w-5" />}
        {!isLoading && timing?.elapsed && (
          <span className="text-sm text-muted-foreground">
            {(timing.elapsed / 1000).toFixed(1)}s
          </span>
        )}
      </div>

      <div className="relative w-full aspect-[4/3] flex items-center justify-center bg-gray-100 rounded-lg overflow-hidden">
        {image ? (
          <img
            src={image}
            alt={`Generated by ${providerConfig.displayName}`}
            className="object-contain w-full h-full"
          />
        ) : failed ? (
          <span className="text-destructive text-center">Failed to load image</span>
        ) : (
          <span className="text-muted-foreground">No image generated</span>
        )}
      </div>

      {proxyImage && proxyImage !== image && (
        <div className="mt-2 text-sm text-muted-foreground text-center break-all">
          {/* Proxy URL: <a href={proxyImage} target="_blank" rel="noopener noreferrer" className="underline">{proxyImage}</a> */}
        </div>
      )}
      {image && (
        <div className="mt-2 text-sm text-muted-foreground text-center break-all">
          {/* Main URL: <a href={image} target="_blank" rel="noopener noreferrer" className="underline">{image}</a> */}
        </div>
      )}
    </div>
  );
}
